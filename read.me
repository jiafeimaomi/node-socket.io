
入口文件：server.js

Node中的核心模块分两类：
    一类是自带的核心模块，如http、tcp等，
    第二类是第三方核心模块，express就是与http对应的第三方核心模块，用于处理http请求

模块的引入：
    require()

模块的使用：
    use()

模块暴漏：
    module.exports


表结构设计：　
    module目录下文件


项目的根目录：public目录

安装模块：　npm　install 模块名 --save 
删除模块：　npm uninstall 模块名 --save


启动服务：　node server.js

Socket.IO提供了服务器和客户端双方的组件
服务端引入:　
var express = require('express'),　　//express处理http请求
    app = express(),
    server = require('http').createServer(app),
    socketIo = require('socket.io').listen(server);
    socketIo.on('connection', function(socket){
        //连接成功的回调
        console.log('socket已经连接')
        //回调函数中返回socket方法
        socket.on('方法名',function(){
            //接收客户端的请求，此方法名和客户端请求的方法名一致
        })
        socket.emit('方法名') //发送请求
    })
客户端连接:
    需引入socket.io.js文件，供前端界面初始化io
    <script src="http://127.0.0.1:9090/socket.io/socket.io.js"></script>　
    var socket = io.connect();
    发送请求，并传递参数，参数可为空
    socket.emit('login', {username: oNickName.value, password: oPassword.value});
    接收服务端的消息
    socket.on('方法名', function(){
        alert('接收服务端消息！');
    })

连接数据库:
lxl数据库，有则连接，没有则先创建再连接
var mongoose = require('mongoose');
var uri = 'mongodb://127.0.0.1:27017/lxl'; //连接mongo数据库
mongoose.connect(uri, function(error) {
  // if error is truthy, the initial connection failed.
  console.log('error', error);
})

创建表模型:
var Schema = mongoose.Schema;
var UserModel = require('./module/user');
//定义一个Schema,定义了集合的字段
var UserSchema = new Schema(UserModel);
//将Schema转化为model
var User = mongoose.model('User', UserSchema);


User表中插入数据:
User.create({
    username: data.username,
    password: data.password
},function(error, doc){
    if(doc._id){
        socket.emit('success')
    }
})

